from BrickPi import *   #import BrickPi.py file to use BrickPi operations
from numpy import *
import random
import os
    
LEFT_MOTOR = PORT_A
RIGHT_MOTOR = PORT_B
SONAR_MOTOR = PORT_B

LEFT_TOUCHSENSOR = PORT_3
RIGHT_TOUCHSENSOR = PORT_1
SONAR_SENSOR = PORT_2

# threadshold for depth histgram 
histThreshold = 3000
hit = False

##################################################################################
''' This part is the motion of the robot'''
##################################################################################
def initialise():
    BrickPiSetup()  # setup the serial port for communication

    BrickPi.MotorEnable[LEFT_MOTOR] = 1 #Enable the Motor A
    BrickPi.MotorEnable[RIGHT_MOTOR] = 1 #Enable the Motor B

    BrickPi.SensorType[LEFT_TOUCHSENSOR] = TYPE_SENSOR_TOUCH   #Set the type of sensor
    BrickPi.SensorType[RIGHT_TOUCHSENSOR] = TYPE_SENSOR_TOUCH   #Set the type of sensor
    BrickPi.SensorType[SONAR_SENSOR] = TYPE_SENSOR_ULTRASONIC_CONT # Set up ultrsonic sensor
    
    BrickPiSetupSensors()

def forward(distance):
    motorRotateDegree([100,115],[18.75*distance,18.25*distance],[LEFT_MOTOR,RIGHT_MOTOR])

def turn(degrees):
    motorRotateDegree([100,90],[-1*degrees,1*degrees],[LEFT_MOTOR,RIGHT_MOTOR])
    
def rotateSonarSensor(degrees):
    # BrickPi.MotorSpeed[SONAR_MOTOR] = 10
    # 0.0174532925
    motorRotateDegree([150],[degrees],[SONAR_MOTOR])
    # motorRotateDegree([100],[0.0174532925],[SONAR_MOTOR])
    
def bumper_left_hit():
    """get left bumper sensor data
    """
    return BrickPi.Sensor[LEFT_TOUCHSENSOR]

def bumper_right_hit():
    """get right bumper sensor data
    """
    return BrickPi.Sensor[RIGHT_TOUCHSENSOR]

def get_distance_measurement():
    """get sonar sensor data
    """
    BrickPiUpdateValues()
    return BrickPi.Sensor[SONAR_SENSOR] - 3
        
def rotatePI(direct):
    # 13 time "1 degree" rotate motorRotateDegree 
    # 80 time "1 degree" rotate motorRotateDegree
    degree = 40
    while degree > 0:
        
        measurements = []
        # make measurement 10 times and take the mean
        count = 10
        while count > 0:
            measurements.append(get_distance_measurement())
            count -= 1
            time.sleep(0.03)
        dis = mean(measurements)
        
        # write to file
        #f.write('%s\n' % (dis))
        
        rotateSonarSensor(1.0*direct)
        #turn(0.03141926)
        degree -= 1
        
##################################################################################
''' Location Signature classes'''
##################################################################################
        
# Location signature class: stores a signature characterizing one location
class LocationSignature:
    def __init__(self, no_bins = 360):
        self.sig = [0] * no_bins
        
    def print_signature(self):
        for i in range(len(self.sig)):
            print self.sig[i]

# --------------------- File management class ---------------
class SignatureContainer():
    def __init__(self, size = 5):
        self.size      = size; # max number of signatures that can be stored
        self.filenames = [];
        
        # Fills the filenames variable with names like loc_%%.dat 
        # where %% are 2 digits (00, 01, 02...) indicating the location number. 
        for i in range(self.size):
            self.filenames.append('loc_{0:02d}.dat'.format(i))

    # Get the index of a filename for the new signature. If all filenames are 
    # used, it returns -1;
    def get_free_index(self):
        n = 0
        while n < self.size:
            if (os.path.isfile(self.filenames[n]) == False):
                break
            n += 1
            
        if (n >= self.size):
            return -1;
        else:    
            return n;

    # Delete all loc_%%.dat files
    def delete_loc_files(self):
        print "STATUS:  All signature files removed."
        for n in range(self.size):
            if os.path.isfile(self.filenames[n]):
                os.remove(self.filenames[n])
            
    # Writes the signature to the file identified by index (e.g, if index is 1
    # it will be file loc_01.dat). If file already exists, it will be replaced.
    def save(self, signature, index):
        filename = self.filenames[index]
        if os.path.isfile(filename):
            os.remove(filename)
            
        f = open(filename, 'w')

        for i in range(len(signature.sig)):
            s = str(signature.sig[i]) + "\n"
            f.write(s)
        f.close();

    # Read signature file identified by index. If the file doesn't exist
    # it returns an empty signature.
    def read(self, index):
        ls = LocationSignature()
        filename = self.filenames[index]
        if os.path.isfile(filename):
            f = open(filename, 'r')
            for i in range(len(ls.sig)):
                s = f.readline()
                if (s != ''):
                    ls.sig[i] = int(s)
            f.close();
        else:
            print "WARNING: Signature does not exist."
        
        return ls
    
##################################################################################
''' Location Signature application '''
##################################################################################
        
# FILL IN: spin robot or sonar to capture a signature and store it in ls
def characterize_location(ls):
    # print "TODO:    You should implement the function that captures a signature."
    
    '''for i in range(len(ls.sig)):
        ls.sig[i] = random.randint(0, 255)'''
        
    for i in range(len(ls.sig)):
        
        measurements = []
        # make measurement 10 times and take the mean
        count = 10
        while count > 0:
            measurements.append(get_distance_measurement())
            count -= 1
            time.sleep(0.03)
        dis = mean(measurements)
        
        ls.sig[i] = dis
        
        rotateSonarSensor(1.0*direct)

# FILL IN: compare two signatures
def compare_signatures(ls_obs, ls_read):
    dist = 0
    #print "TODO:    You should implement the function that compares two signatures."
    for i in range(len(ls_obs.sig)):
        dist += power(ls_obs[i] - ls_read[i])
    
    return dist

# This function characterizes the current location, and stores the obtained 
# signature into the next available file.
def learn_location():
    ls = LocationSignature()
    characterize_location(ls)
    idx = signatures.get_free_index();
    if (idx == -1): # run out of signature files
        print "\nWARNING:"
        print "No signature file is available. NOTHING NEW will be learned and stored."
        print "Please remove some loc_%%.dat files.\n"
        return
    
    signatures.save(ls,idx)
    print "STATUS:  Location " + str(idx) + " learned and saved."

# This function tries to recognize the current location.
# 1.   Characterize current location
# 2.   For every learned locations
# 2.1. Read signature of learned location from file
# 2.2. Compare signature to signature coming from actual characterization
# 3.   Retain the learned location whose minimum distance with
#      actual characterization is the smallest.
# 4.   Display the index of the recognized location on the screen
def recognize_location():
    ls_obs = LocationSignature();
    characterize_location(ls_obs);

    best_match = signatures[0]
    # FILL IN: COMPARE ls_read with ls_obs and find the best match
    for idx in range(signatures.size):
        print "STATUS:  Comparing signature " + str(idx) + " with the observed signature."
        ls_read = signatures.read(idx);
        dist    = compare_signatures(ls_obs, ls_read)
        print "checking " + idx
        
        if dist < histThreshold:
            best_match = ls_read
            print "At location: " + idx
            break

if __name__ == "__main__":
    
    initialise()
    
    '''signatures = SignatureContainer(5);
    # signatures.delete_loc_files()

    learn_location();
    recognize_location();'''
    
    rotatePI(1)
    # reset for cable.......
    count = 40
    while count > 0:
        rotateSonarSensor(1.0*(-1))
        count -= 1
    #rotatePI(-1, False)
    #rotatePI(-1, True)

