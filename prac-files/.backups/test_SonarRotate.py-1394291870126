#import
from BrickPi import *
from numpy import *
import random
import os
from Exercise6 import *

#define port
SONAR_MOTOR = PORT_B
SONAR_SENSOR = PORT_2

#initial sonar sensor

def initialise():
    BrickPiSetup()  
    BrickPi.MotorEnable[SONAR_MOTOR] = 1
    BrickPi.SensorType[SONAR_SENSOR] = TYPE_SENSOR_ULTRASONIC_CONT
    BrickPiSetupSensors()

#define rotate sonar sensor function
def rotateSonarSensor(degrees,ls,read):
    motorRotateDegree([150],[(3.37*degrees)*2*(-1)],[SONAR_MOTOR],[SONAR_SENSOR],ls,read)
    
def read():
        return BrickPi.Sensor[SONAR_SENSOR]
    
    
def motorRotateDegree(power,deg,port,sonar_port,location_signature,read,sampling_time=.03):
    
    """Rotate the selected motors by specified degre
    
    Args:
        power        : an array of the power values at which to rotate the motors (0-255)
        deg        : an array of the angle's (in degrees) by which to rotate each of the motor
        port        : an array of the port's on which the motor is connected
        sampling_time    : (optional) the rate(in seconds) at which to read the data in the encoders

    Returns:
        0 on success

    Usage:
        Pass the arguments in a list. if a single motor has to be controlled then the arguments should be
        passed like elements of an array,e.g, motorRotateDegree([255],[360],[PORT_A]) or 
        motorRotateDegree([255,255],[360,360],[PORT_A,PORT_B])
    """

    num_motor=len(power)        #Number of motors being used
    init_val=[0]*num_motor
    final_val=[0]*num_motor
    BrickPiUpdateValues()  
    for i in range(num_motor):
        BrickPi.MotorEnable[port[i]] = 1                #Enable the Motors
        power[i]=abs(power[i])
        BrickPi.MotorSpeed[port[i]] = power[i] if deg[i]>0 else -power[i]    #For running clockwise and anticlockwise
        init_val[i]=BrickPi.Encoder[port[i]]                #Initial reading of the encoder    
        final_val[i]=init_val[i]+(deg[i]*2)                #Final value when the motor has to be stopped;One encoder value counts for 0.5 degrees
    run_stat=[0]*num_motor
    '''Modified'''
    print read
    if read:
        pre_value = BrickPi.Encoder[port[0]]
        print deg
    '''Modify end'''
    while True:
        result = BrickPiUpdateValues()                  #Ask BrickPi to update values for sensors/motors
        
        if not result :
            if read :
                current_value = BrickPi.Encoder[port[0]]
                print current_value
                print "current_value - pre_value: " + str(current_value - pre_value)
                if abs(current_value - pre_value)/10>0:
                    dif = float(abs(current_value - pre_value))
                    shang = int(round(dif/10.0))
                    pre_value = current_value 
                    dis = BrickPi.Sensor[sonar_port[0]]
                    print "SSdis  " + str(dis)
                    location_signature.sig.extend([dis]*shang)
                
            for i in range(num_motor):                #Do for each of the motors
                if run_stat[i]==1:
                    continue
                if(deg[i]>0 and final_val[i]>init_val[i]) or (deg[i]<0 and final_val[i]<init_val[i]) :    #Check if final value reached for each of the motors
                               init_val[i]=BrickPi.Encoder[port[i]]            #Read the encoder degrees      
                else:
                    run_stat[i]=1
                    BrickPi.MotorSpeed[port[i]]=-power[i]*3 if deg[i]>0 else power[i]    #Run the motors in reverse direction to stop instantly
                    BrickPiUpdateValues()
                    time.sleep(.04)
                    BrickPi.MotorEnable[port[i]] = 0
                    BrickPiUpdateValues()
        time.sleep(sampling_time)                    #sleep for the sampling time given (default:100 ms)
        if(all(e==1 for e in run_stat)):                #If all the motors have already completed their rotation, then stop
            break
    return location_signature if read else 0


#main
if __name__ == "__main__":
    initialise()
    ''' test rotate'''
    #rotateSonarSensor(180,None,False)
    #rotateSonarSensor(-180,None,False)
    ''' test rotate and read'''
    ls = LocationSignature()
    rotateSonarSensor(180,ls,True)
    rotateSonarSensor(180,None,False)
    
    
    
