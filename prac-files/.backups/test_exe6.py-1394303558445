from BrickPi import *   #import BrickPi.py file to use BrickPi operations
from numpy import *
import random
import os

LEFT_MOTOR = PORT_A
RIGHT_MOTOR = PORT_C
SONAR_MOTOR = PORT_B

LEFT_TOUCHSENSOR = PORT_3
RIGHT_TOUCHSENSOR = PORT_2
SONAR_SENSOR = PORT_2

histThreshold = 5000000
hit = False

# mutex = threading.Lock()
# condition = threading.Condition()

##################################################################################
''' This part is the motion of the robot'''
##################################################################################
'''Initialize all sensor and motors'''
def initialise():
    BrickPiSetup()
    
    BrickPi.MotorEnable[LEFT_MOTOR] = 1
    BrickPi.MotorEnable[RIGHT_MOTOR] = 1
    BrickPi.MotorEnable[SONAR_MOTOR] = 1
    
    BrickPi.SensorType[LEFT_TOUCHSENSOR] = TYPE_SENSOR_TOUCH
    BrickPi.SensorType[RIGHT_TOUCHSENSOR] = TYPE_SENSOR_TOUCH
    BrickPi.SensorType[SONAR_SENSOR] = TYPE_SENSOR_ULTRASONIC_CONT
    
    BrickPiSetupSensors()
'''Control robot rotate and forward'''
def forward(distance):
    motorRotateDegree([100,115],[18.75*distance,18.25*distance],[LEFT_MOTOR,RIGHT_MOTOR])

def turn(degrees):
    motorRotateDegree([100,90],[-1*degrees,1*degrees],[LEFT_MOTOR,RIGHT_MOTOR])

'''Control sonar rotate and read'''
def rotateSonarSensor(degrees):
    motorRotateDegree([150],[degrees],[SONAR_MOTOR], SONAR_SENSOR_PORT)

def rotateSonar(angle, direct):
    rotateSonarSensor(angle*direct)

def get_distance_measurement():
    #get sonar sensor data
    result = BrickPiUpdateValues()
    value = 0
    if not result :
        value = BrickPi.Sensor[SONAR_SENSOR]
    time.sleep(.025)
    return value

'''Control bumper hit or not'''
def bumper_left_hit():
    #if hit return true else false
    return BrickPi.Sensor[LEFT_TOUCHSENSOR]

def bumper_right_hit():
    #if hit return true else false
    return BrickPi.Sensor[RIGHT_TOUCHSENSOR]


##################################################################################
''' Location Signature classes These clsses are defined by teacher'''
##################################################################################

# Location signature class: stores a signature characterizing one location
class LocationSignature:
    def __init__(self, no_bins = 80):
        self.sig = [] # [0] * no_bins
    
    def print_signature(self):
        for i in range(len(self.sig)):
            print self.sig[i]

# --------------------- File management class ---------------
class SignatureContainer():
    def __init__(self, size = 5):
        self.size      = size; # max number of signatures that can be stored
        self.filenames = [];
        
        # Fills the filenames variable with names like loc_%%.dat
        # where %% are 2 digits (00, 01, 02...) indicating the location number.
        for i in range(self.size):
            self.filenames.append('loc_{0:02d}.dat'.format(i))
    
    # Get the index of a filename for the new signature. If all filenames are
    # used, it returns -1;
    def get_free_index(self):
        n = 0
        while n < self.size:
            if (os.path.isfile(self.filenames[n]) == False):
                break
            n += 1
        
        if (n >= self.size):
            return -1;
        else:
            return n;
    
    # Delete all loc_%%.dat files
    def delete_loc_files(self):
        print "STATUS:  All signature files removed."
        for n in range(self.size):
            if os.path.isfile(self.filenames[n]):
                os.remove(self.filenames[n])
    
    # Writes the signature to the file identified by index (e.g, if index is 1
    # it will be file loc_01.dat). If file already exists, it will be replaced.
    def save(self, signature, index):
        filename = self.filenames[index]
        if os.path.isfile(filename):
            os.remove(filename)
        
        f = open(filename, 'w')
        
        for i in range(len(signature.sig)):
            s = str(signature.sig[i]) + "\n"
            f.write(s)
        f.close();
    
    # Read signature file identified by index. If the file doesn't exist
    # it returns an empty signature.
    def read(self, index):
        ls = LocationSignature()
        filename = self.filenames[index]
        print ls.sig
        print filename
        if os.path.isfile(filename):
            #f = open(filename, 'r')
            with open(filename) as fp:
                for line in fp:
                    if (line != ''):
                        ls.sig.append(float(line.replace("\n", "")))
            '''for i in range(ls.bins):
                s = f.readline()
                if (s != ''):
                ls.sig.append(int(float(s.replace("\n", ""))))'''
            #ls.sig[i] = int(s)
            #f.close();
            fp.close();
        else:
            print "WARNING: Signature does not exist."
        print ls.sig
        return ls

##################################################################################
''' Location Signature application '''
##################################################################################

# FILL IN: spin robot or sonar to capture a signature and store it in ls
def characterize_location(ls, learning):
    # print "TODO:    You should implement the function that captures a signature."
    if learning:
        print "rotate to starting point"
        motorRotateDegree([200],[6.8*180],[SONAR_MOTOR],[SONAR_SENSOR],ls,False)
        print "reading..."
        ls = motorRotateDegree([90],[(7.1*180)*2.0*(-1)],[SONAR_MOTOR],[SONAR_SENSOR],ls,True)
        print "rotate back"
        motorRotateDegree([200],[7.2*180],[SONAR_MOTOR],[SONAR_SENSOR],ls,False)
    else:
        print "reading..."
        ls = motorRotateDegree([90],[(6.8*100)*(-1)],[SONAR_MOTOR],[SONAR_SENSOR],ls,True)
        print "rotate back"
        motorRotateDegree([200],[6.9*100],[SONAR_MOTOR],[SONAR_SENSOR],ls,False)

# FILL IN: compare two signatures
def compare_signatures(ls_obs, ls_read):
    #print "TODO:    You should implement the function that compares two signatures."
    print len(ls_read.sig)
    print "ls_read     "+str(ls_read.sig)
    print len(ls_obs.sig)
    print "ls_obs      "+str(ls_obs.sig)

    return [dis, angle]

# KMP Match Algorithm
def kmp(src, sub):
    srcl = len(src)
    subl = len(sub)
    if (subl > srcl):
        return -1
    i = 0
    j = 0
    distance = 0
    while ((i < srcl) and (j < subl)):
        if equals(src[i], sub[j]):
            i +=1
            j +=1
        else:
              
            i = i - j + 1  #back
            j = 0
              
    if (j >= subl):           
        index = i - subl       
    else:
        index = -1

def equals(src,sub):
       return sub<= src+0.1 and sub >= src -0.1


# This function characterizes the current location, and stores the obtained
# signature into the next available file.
def learn_location():
    ls = LocationSignature()
    characterize_location(ls, True)
    idx = signatures.get_free_index();
    if (idx == -1): # run out of signature files
        print "\nWARNING:"
        print "No signature file is available. NOTHING NEW will be learned and stored."
        print "Please remove some loc_%%.dat files.\n"
        return
    
    signatures.save(ls,idx)
    print "STATUS:  Location " + str(idx) + " learned and saved."

# This function tries to recognize the current location.
# 1.   Characterize current location
# 2.   For every learned locations
# 2.1. Read signature of learned location from file
# 2.2. Compare signature to signature coming from actual characterization
# 3.   Retain the learned location whose minimum distance with
#      actual characterization is the smallest.
# 4.   Display the index of the recognized location on the screen
def recognize_location():
    ls_obs = LocationSignature();
    characterize_location(ls_obs, False);
    
    best_match = signatures.filenames[0]
    currentMax = histThreshold
    
    # FILL IN: COMPARE ls_read with ls_obs and find the best match
    for idx in range(signatures.size):
        print "STATUS:  Comparing signature " + str(idx) + " with the observed signature."
        ls_read = signatures.read(idx);
        [maxcorr, angle]    = compare_signatures(ls_obs, ls_read)
        
        print "checking location: " + str(idx)
        
        print "maxcorr " + str(maxcorr)
        print "angle " + str(angle)
        
        if maxcorr < currentMax:
            currentMax = maxcorr
            best_match = ls_read
            print "At location: " + str(idx)
            break

if __name__ == "__main__":
    
    initialise()
    
    signatures = SignatureContainer(1);
    # signatures.delete_loc_files()
    
    print "learning..."
    learn_location();
    print "recognizing..."
    recognize_location();


